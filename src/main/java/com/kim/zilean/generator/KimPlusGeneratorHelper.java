package com.kim.zilean.generator;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.intellij.database.model.DasColumn;
import com.intellij.database.psi.DbTable;
import com.intellij.database.util.DasUtil;
import com.kim.zilean.ZileanContext;
import com.kim.zilean.generator.convert.IColumnType;
import com.kim.zilean.generator.convert.MysqlTypeColumnConvert;
import com.kim.zilean.generator.engine.AbstractTemplateEngine;
import com.kim.zilean.generator.engine.FreemarkerTemplateEngine;
import com.kim.zilean.model.*;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.kim.zilean.util.ZileanUtils.MYSQL_KEYWORDS;

/**
 * 生成文件
 * <p>
 * 单例模式
 *
 * @author duanledexianxianxian
 * @since 2016 -08-30
 */
@Slf4j
public class KimPlusGeneratorHelper {
    private final ObjectMapper objectMapper = new ObjectMapper();

    /**
     * Instantiates a new Kim plus generator helper.
     */
    KimPlusGeneratorHelper() {
    }

    /**
     * Gets instance.
     *
     * @return the instance
     */
    public static KimPlusGeneratorHelper getInstance() {
        return KimPlusGeneratorHelpInstance.INSTANCE;
    }

    /**
     * 获取表格数据
     *
     * @param config the config
     * @return the table info list
     */
    public List<TableInfo> getTableInfoList(Config config) {
        Map<String, DbTable> tables = ZileanContext.getInstance().getTableMap();
        List<String> selectedTableList = ZileanContext.getInstance().getSelectedTableList();
        return selectedTableList.parallelStream().map(
                i -> buildTableInfoData(config, tables.get(i)))
                .collect(Collectors.toList());
    }

    /**
     * 构建table数据
     *
     * @param config the config
     * @param table  the table
     * @return table info
     */
    private TableInfo buildTableInfoData(Config config, DbTable table) {
        TableInfo tableInfo = new TableInfo();
        tableInfo.setName(table.getName());
        tableInfo.setComment(table.getComment());

        final List<String> imports = new ArrayList<>();

        // 列
        List<? extends DasColumn> columns = DasUtil.getColumns(table).toList();
        List<TableField> list = columns.parallelStream().map(c -> {
            TableField tableField = new TableField();
            tableField.setName(c.getName());
            tableField.setFieldName(com.kim.zilean.util.StringUtils.underlineToCamel(c.getName()));
            tableField.setDataType(c.getDataType());
            //todo 支持日期类型
            IColumnType columnType = MysqlTypeColumnConvert.typeOf(c.getDataType().typeName.split(" ")[0]);
            tableField.setJdbcType(columnType.getJdbcType());
            tableField.setJavaType(columnType.getJavaType());
            tableField.setComment(c.getComment());
            tableField.setNotNull(c.isNotNull());
            tableField.setPrimaryKey(DasUtil.isPrimary(c));
            tableField.setAutoGenerate(DasUtil.isAutoGenerated(c));
            tableField.setInCommon(config.isCommonColumn(c.getName()));
            tableField.setTableLogic(config.isLogicColumn(c.getName()));
            tableField.setMysqlKeyword(MYSQL_KEYWORDS.contains(c.getName().toUpperCase()));
            if (StringUtils.isNotBlank(tableField.getJavaType())) {
                imports.add(tableField.getJavaType());
                tableField.setSimpleJavaType(tableField.getJavaType().substring(tableField.getJavaType().lastIndexOf('.') + 1));
            } else {
                tableField.setSimpleJavaType(tableField.getJavaType());
            }
            return tableField;
        }).collect(Collectors.toList());
        tableInfo.setColumns(list);

        String noPrefixName = config.getTablePrefix().isEmpty() ? table.getName() : table.getName().replaceFirst("^" + config.getTablePrefix(), "");
        String beanName = com.kim.zilean.util.StringUtils.underlineToCamel(noPrefixName);
        String singleName = com.kim.zilean.util.StringUtils.upperFirst(beanName);

        PackageConfigs packageConfigs = config.getPackageConfigs();
        // entity
        tableInfo.setEntity(buildClass(config, packageConfigs.getEntity(), singleName, beanName));
        tableInfo.getEntity().setImports(imports.stream().distinct().sorted().collect(Collectors.toList()));
        // dto
        tableInfo.setDto(buildClass(config, packageConfigs.getDto(), singleName, beanName));
        tableInfo.getDto().setImports(imports.stream().distinct().sorted().collect(Collectors.toList()));
        // vo
        tableInfo.setVo(buildClass(config, packageConfigs.getVo(), singleName, beanName));
        tableInfo.getVo().setImports(imports.stream().distinct().sorted().collect(Collectors.toList()));
        // form
        tableInfo.setForm(buildClass(config, packageConfigs.getForm(), singleName, beanName));
        tableInfo.getForm().setImports(imports.stream().distinct().sorted().collect(Collectors.toList()));
        // query
        tableInfo.setQuery(buildClass(config, packageConfigs.getQuery(), singleName, beanName));
        tableInfo.getVo().setImports(imports.stream().distinct().sorted().collect(Collectors.toList()));

        // dao
        tableInfo.setDao(buildClass(config, packageConfigs.getDao(), singleName, beanName));

        // service
        tableInfo.setService(buildClass(config, packageConfigs.getService(), singleName, beanName));

        // serviceImpl
        tableInfo.setServiceImpl(buildClass(config, packageConfigs.getServiceImpl(), singleName, beanName));

        // controller
        tableInfo.setController(buildClass(config, packageConfigs.getController(), singleName, beanName));

        // xml
        tableInfo.setXmlPath(packageConfigs.getXml().getPkg() + "/" + tableInfo.getEntity().getName() + packageConfigs.getXml().getSuffix() + ".xml");

        return tableInfo;
    }

    private Classes buildClass(Config config, PackageConfig packageConfig, String singleName, String beanName) {
        Classes clz = new Classes();
        clz.setPkg(packageConfig.getPkg());
        clz.setName(singleName + packageConfig.getSuffix());
        clz.setPropsName(beanName + packageConfig.getSuffix());
        clz.setClassName(clz.getPkg() + "." + clz.getName());
        clz.setFilePath(config.getBasePath() + "/" + clz.getPkg().replaceAll("\\.", "/"));
        clz.setFileName(clz.getFilePath() + "/" + clz.getName() + ".java");
        return clz;
    }

    /**
     * Generate.
     *
     * @param config the config
     */
    public void generate(Config config) {
        AbstractTemplateEngine templateEngine = new FreemarkerTemplateEngine();
        templateEngine.init(config);
        templateEngine.batchOutput();
    }

    /**
     * 获取配置数据
     *
     * @param config the config
     */
    public void cacheGeneratorData(Config config) {
        String dataCacheFile = ZileanContext.getInstance().getDataCacheFile();
        try {
            if (dataCacheFile != null) {
                String cache = this.objectMapper.writeValueAsString(config);
                FileUtils.writeStringToFile(new File(dataCacheFile), cache, StandardCharsets.UTF_8);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 读取配置数据
     *
     * @return config config
     */
    public Config readCacheData() {
        String dataCacheFile = ZileanContext.getInstance().getDataCacheFile();
        try {
            if (dataCacheFile != null) {
                File cacheFile = new File(dataCacheFile);
                FileUtils.forceMkdirParent(cacheFile);
                if (cacheFile.isFile()) {
                    String cache = FileUtils.readFileToString(cacheFile, StandardCharsets.UTF_8);
                    return this.objectMapper.readValue(cache, Config.class);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static class KimPlusGeneratorHelpInstance {
        /**
         * The constant INSTANCE.
         */
        private static final KimPlusGeneratorHelper INSTANCE = new KimPlusGeneratorHelper();
    }
}
